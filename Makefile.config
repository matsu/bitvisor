include Makefile.common

.PHONY : check-python
check-python :
	$(PYTHON) -c 'import sys; e = 1 if sys.version_info < (3, 0) \
		else 0; print("Need Python 3 or later to generate $(CONFIG)") \
		if e == 1 else None; exit(e)'

.PHONY : check-empty-config
check-empty-config :
	if ! grep . $(CONFIG) > /dev/null 2> /dev/null; then \
		echo "Unexpected empty $(CONFIG)" \
			"run 'make config' to generate it properly"; \
		false; \
	fi

.PHONY : check-old-config
check-old-config :
	if grep '=[01]' $(CONFIG) > /dev/null 2> /dev/null; then \
		echo "Old style $(CONFIG) found, please back up it," \
			"run 'make config', and reconfigure for new format"; \
		false; \
	fi

.PHONY : menuconfig
menuconfig :
	$(MAKE) $(V-makeopt-$(V)) -f Makefile.config check-python V=$(V)
	$(MAKE) $(V-makeopt-$(V)) -f Makefile.config check-old-config V=$(V)
	CC=$(CC) $(PYTHON) scripts/kconfig/menuconfig.py

.PHONY : default-config
default-config :
	$(MAKE) $(V-makeopt-$(V)) -f Makefile.config check-python V=$(V)
	$(MAKE) $(V-makeopt-$(V)) -f Makefile.config check-old-config V=$(V)
	: >> $(CONFIG)
	if ! CC=$(CC) $(PYTHON) scripts/kconfig/kconfig.py Kconfig .config \
		/dev/null /dev/null .config; then \
		echo "scripts/kconfig/kconfig.py fails"; \
		if ! grep . $(CONFIG) > /dev/null 2> /dev/null; then \
			echo "Removing empty $(CONFIG)"; $(RM) $(CONFIG); \
		fi; \
		false; \
	fi # Remove empty $(CONFIG) in case of failure
